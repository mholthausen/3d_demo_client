define(["exports","./when-54c2dc71","./Check-6c0211bc","./Math-fc8cecf5","./Cartesian2-bddc1162","./Transforms-6f81ad4c","./ComponentDatatype-6d99a1ee","./GeometryAttribute-700c1da0","./GeometryAttributes-4fcfcf40","./IndexDatatype-53503fee","./GeometryOffsetAttribute-7350d9af"],(function(i,t,e,a,n,r,o,s,m,u,f){"use strict";var d=new n.Cartesian3(1,1,1),l=Math.cos,c=Math.sin;function C(i){i=t.defaultValue(i,t.defaultValue.EMPTY_OBJECT);var e=t.defaultValue(i.radii,d),r=t.defaultValue(i.innerRadii,e),o=t.defaultValue(i.minimumClock,0),s=t.defaultValue(i.maximumClock,a.CesiumMath.TWO_PI),m=t.defaultValue(i.minimumCone,0),u=t.defaultValue(i.maximumCone,a.CesiumMath.PI),f=Math.round(t.defaultValue(i.stackPartitions,10)),l=Math.round(t.defaultValue(i.slicePartitions,8)),c=Math.round(t.defaultValue(i.subdivisions,128));this._radii=n.Cartesian3.clone(e),this._innerRadii=n.Cartesian3.clone(r),this._minimumClock=o,this._maximumClock=s,this._minimumCone=m,this._maximumCone=u,this._stackPartitions=f,this._slicePartitions=l,this._subdivisions=c,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}C.packedLength=2*n.Cartesian3.packedLength+8,C.pack=function(i,e,a){return a=t.defaultValue(a,0),n.Cartesian3.pack(i._radii,e,a),a+=n.Cartesian3.packedLength,n.Cartesian3.pack(i._innerRadii,e,a),a+=n.Cartesian3.packedLength,e[a++]=i._minimumClock,e[a++]=i._maximumClock,e[a++]=i._minimumCone,e[a++]=i._maximumCone,e[a++]=i._stackPartitions,e[a++]=i._slicePartitions,e[a++]=i._subdivisions,e[a]=t.defaultValue(i._offsetAttribute,-1),e};var _=new n.Cartesian3,h=new n.Cartesian3,p={radii:_,innerRadii:h,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};C.unpack=function(i,e,a){e=t.defaultValue(e,0);var r=n.Cartesian3.unpack(i,e,_);e+=n.Cartesian3.packedLength;var o=n.Cartesian3.unpack(i,e,h);e+=n.Cartesian3.packedLength;var s=i[e++],m=i[e++],u=i[e++],f=i[e++],d=i[e++],l=i[e++],c=i[e++];return e=i[e],t.defined(a)?(a._radii=n.Cartesian3.clone(r,a._radii),a._innerRadii=n.Cartesian3.clone(o,a._innerRadii),a._minimumClock=s,a._maximumClock=m,a._minimumCone=u,a._maximumCone=f,a._stackPartitions=d,a._slicePartitions=l,a._subdivisions=c,a._offsetAttribute=-1===e?void 0:e,a):(p.minimumClock=s,p.maximumClock=m,p.minimumCone=u,p.maximumCone=f,p.stackPartitions=d,p.slicePartitions=l,p.subdivisions=c,p.offsetAttribute=-1===e?void 0:e,new C(p))},C.createGeometry=function(i){var e=i._radii;if(!(e.x<=0||e.y<=0||e.z<=0)){var d=i._innerRadii;if(!(d.x<=0||d.y<=0||d.z<=0)){var C=i._minimumClock,_=i._maximumClock,h=i._minimumCone,p=i._maximumCone,y=i._subdivisions,v=n.Ellipsoid.fromCartesian3(e),k=i._slicePartitions+1,b=i._stackPartitions+1;(k=Math.round(k*Math.abs(_-C)/a.CesiumMath.TWO_PI))<2&&(k=2),(b=Math.round(b*Math.abs(p-h)/a.CesiumMath.PI))<2&&(b=2);var A=0,x=1,P=d.x!==e.x||d.y!==e.y||d.z!==e.z,w=!1,M=!1;P&&(x=2,0<h&&(w=!0,A+=k),p<Math.PI&&(M=!0,A+=k));for(var V,g,G=y*x*(b+k),E=new Float64Array(3*G),O=(A=2*(G+A-(k+b)*x),u.IndexDatatype.createTypedArray(G,A)),D=0,I=new Array(b),T=new Array(b),z=0;z<b;z++)g=h+z*(p-h)/(b-1),I[z]=c(g),T[z]=l(g);var L=new Array(y),R=new Array(y);for(z=0;z<y;z++)V=C+z*(_-C)/(y-1),L[z]=c(V),R[z]=l(V);for(z=0;z<b;z++)for(B=0;B<y;B++)E[D++]=e.x*I[z]*R[B],E[D++]=e.y*I[z]*L[B],E[D++]=e.z*T[z];if(P)for(z=0;z<b;z++)for(B=0;B<y;B++)E[D++]=d.x*I[z]*R[B],E[D++]=d.y*I[z]*L[B],E[D++]=d.z*T[z];for(I.length=y,T.length=y,z=0;z<y;z++)g=h+z*(p-h)/(y-1),I[z]=c(g),T[z]=l(g);for(L.length=k,R.length=k,z=0;z<k;z++)V=C+z*(_-C)/(k-1),L[z]=c(V),R[z]=l(V);for(z=0;z<y;z++)for(B=0;B<k;B++)E[D++]=e.x*I[z]*R[B],E[D++]=e.y*I[z]*L[B],E[D++]=e.z*T[z];if(P)for(z=0;z<y;z++)for(B=0;B<k;B++)E[D++]=d.x*I[z]*R[B],E[D++]=d.y*I[z]*L[B],E[D++]=d.z*T[z];for(z=D=0;z<b*x;z++)for(var N=z*y,B=0;B<y-1;B++)O[D++]=N+B,O[D++]=N+B+1;var S=b*y*x;for(z=0;z<k;z++)for(B=0;B<y-1;B++)O[D++]=S+z+B*k,O[D++]=S+z+(B+1)*k;if(P)for(S=b*y*x+k*y,z=0;z<k;z++)for(B=0;B<y-1;B++)O[D++]=S+z+B*k,O[D++]=S+z+(B+1)*k;if(P){var U=b*y*x,F=U+y*k;if(w)for(z=0;z<k;z++)O[D++]=U+z,O[D++]=F+z;if(M)for(U+=y*k-k,F+=y*k-k,z=0;z<k;z++)O[D++]=U+z,O[D++]=F+z}return P=new m.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:o.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:E})}),t.defined(i._offsetAttribute)&&(w=E.length,M=new Uint8Array(w/3),w=i._offsetAttribute===f.GeometryOffsetAttribute.NONE?0:1,f.arrayFill(M,w),P.applyOffset=new s.GeometryAttribute({componentDatatype:o.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:M})),new s.Geometry({attributes:P,indices:O,primitiveType:s.PrimitiveType.LINES,boundingSphere:r.BoundingSphere.fromEllipsoid(v),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=C}));