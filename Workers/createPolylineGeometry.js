define(["./when-54c2dc71","./Check-6c0211bc","./Math-fc8cecf5","./Cartesian2-bddc1162","./Transforms-6f81ad4c","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./ComponentDatatype-6d99a1ee","./GeometryAttribute-700c1da0","./GeometryAttributes-4fcfcf40","./IndexDatatype-53503fee","./IntersectionTests-7f3bcd5c","./Plane-b6058d9b","./VertexFormat-7572c785","./arrayRemoveDuplicates-ebc732b0","./ArcType-dc1c5aee","./EllipsoidRhumbLine-c704bf4c","./EllipsoidGeodesic-30fae80b","./PolylinePipeline-7685bebd","./Color-6328388f"],(function(e,t,r,a,o,n,i,l,s,p,c,d,u,y,m,f,h,C,v,g){"use strict";var _=[];function b(t){var o=(t=e.defaultValue(t,e.defaultValue.EMPTY_OBJECT)).positions,n=t.colors,i=e.defaultValue(t.width,1),l=e.defaultValue(t.colorsPerVertex,!1);this._positions=o,this._colors=n,this._width=i,this._colorsPerVertex=l,this._vertexFormat=y.VertexFormat.clone(e.defaultValue(t.vertexFormat,y.VertexFormat.DEFAULT)),this._arcType=e.defaultValue(t.arcType,f.ArcType.GEODESIC),this._granularity=e.defaultValue(t.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=a.Ellipsoid.clone(e.defaultValue(t.ellipsoid,a.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry",o=1+o.length*a.Cartesian3.packedLength,o+=e.defined(n)?1+n.length*g.Color.packedLength:1,this.packedLength=o+a.Ellipsoid.packedLength+y.VertexFormat.packedLength+4}b.pack=function(t,r,o){var n;o=e.defaultValue(o,0);var i=t._positions,l=i.length;for(r[o++]=l,n=0;n<l;++n,o+=a.Cartesian3.packedLength)a.Cartesian3.pack(i[n],r,o);var s=t._colors;for(l=e.defined(s)?s.length:0,r[o++]=l,n=0;n<l;++n,o+=g.Color.packedLength)g.Color.pack(s[n],r,o);return a.Ellipsoid.pack(t._ellipsoid,r,o),o+=a.Ellipsoid.packedLength,y.VertexFormat.pack(t._vertexFormat,r,o),o+=y.VertexFormat.packedLength,r[o++]=t._width,r[o++]=t._colorsPerVertex?1:0,r[o++]=t._arcType,r[o]=t._granularity,r};var A=a.Ellipsoid.clone(a.Ellipsoid.UNIT_SPHERE),E=new y.VertexFormat,P={positions:void 0,colors:void 0,ellipsoid:A,vertexFormat:E,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};b.unpack=function(t,r,o){r=e.defaultValue(r,0);for(var n=t[r++],i=new Array(n),l=0;l<n;++l,r+=a.Cartesian3.packedLength)i[l]=a.Cartesian3.unpack(t,r);var s=0<(n=t[r++])?new Array(n):void 0;for(l=0;l<n;++l,r+=g.Color.packedLength)s[l]=g.Color.unpack(t,r);var p=a.Ellipsoid.unpack(t,r,A);r+=a.Ellipsoid.packedLength;var c=y.VertexFormat.unpack(t,r,E);r+=y.VertexFormat.packedLength;var d=t[r++],u=1===t[r++],m=t[r++],f=t[r];return e.defined(o)?(o._positions=i,o._colors=s,o._ellipsoid=a.Ellipsoid.clone(p,o._ellipsoid),o._vertexFormat=y.VertexFormat.clone(c,o._vertexFormat),o._width=d,o._colorsPerVertex=u,o._arcType=m,o._granularity=f,o):(P.positions=i,P.colors=s,P.width=d,P.colorsPerVertex=u,P.arcType=m,P.granularity=f,new b(P))};var w=new a.Cartesian3,T=new a.Cartesian3,x=new a.Cartesian3,k=new a.Cartesian3;return b.createGeometry=function(t){var n=t._width,i=t._vertexFormat,d=t._colors,u=t._colorsPerVertex,y=t._arcType,h=t._granularity,C=t._ellipsoid,b=m.arrayRemoveDuplicates(t._positions,a.Cartesian3.equalsEpsilon),A=b.length;if(!(A<2||n<=0)){if(y===f.ArcType.GEODESIC||y===f.ArcType.RHUMB){var E,P=y===f.ArcType.GEODESIC?(E=r.CesiumMath.chordLength(h,C.maximumRadius),v.PolylinePipeline.numberOfPoints):(E=h,v.PolylinePipeline.numberOfPointsRhumbLine),D=v.PolylinePipeline.extractHeights(b,C);if(e.defined(d)){for(var V=1,L=0;L<A-1;++L)V+=P(b[L],b[L+1],E);var F=new Array(V),G=0;for(L=0;L<A-1;++L){var O=b[L],R=b[L+1],I=d[L],S=P(O,R,E);if(u&&L<V)for(var B=function(e,t,r){var a=_;a.length=r;var o=e.red,n=e.green,i=e.blue,l=e.alpha,s=t.red,p=t.green,c=t.blue,d=t.alpha;if(g.Color.equals(e,t)){for(h=0;h<r;h++)a[h]=g.Color.clone(e);return a}for(var u=(s-o)/r,y=(p-n)/r,m=(c-i)/r,f=(d-l)/r,h=0;h<r;h++)a[h]=new g.Color(o+h*u,n+h*y,i+h*m,l+h*f);return a}(I,d[L+1],S),U=B.length,N=0;N<U;++N)F[G++]=B[N];else for(N=0;N<S;++N)F[G++]=g.Color.clone(I)}F[G]=g.Color.clone(d[d.length-1]),d=F,_.length=0}b=y===f.ArcType.GEODESIC?v.PolylinePipeline.generateCartesianArc({positions:b,minDistance:E,ellipsoid:C,height:D}):v.PolylinePipeline.generateCartesianRhumbArc({positions:b,granularity:E,ellipsoid:C,height:D})}C=4*(A=b.length)-4;var M,H,W,Y=new Float64Array(3*C),q=new Float64Array(3*C),z=new Float64Array(3*C),J=new Float32Array(2*C),j=i.st?new Float32Array(2*C):void 0,K=e.defined(d)?new Uint8Array(4*C):void 0,Q=0,X=0,Z=0,$=0;for(N=0;N<A;++N){0===N?(M=w,a.Cartesian3.subtract(b[0],b[1],M),a.Cartesian3.add(b[0],M,M)):M=b[N-1],a.Cartesian3.clone(M,x),a.Cartesian3.clone(b[N],T),N===A-1?(M=w,a.Cartesian3.subtract(b[A-1],b[A-2],M),a.Cartesian3.add(b[A-1],M,M)):M=b[N+1],a.Cartesian3.clone(M,k),e.defined(K)&&(H=0===N||u?d[N]:d[N-1],N!==A-1&&(W=d[N]));for(var ee=N===A-1?2:4,te=0===N?2:0;te<ee;++te){a.Cartesian3.pack(T,Y,Q),a.Cartesian3.pack(x,q,Q),a.Cartesian3.pack(k,z,Q),Q+=3;var re=te-2<0?-1:1;J[X++]=te%2*2-1,J[X++]=re*n,i.st&&(j[Z++]=N/(A-1),j[Z++]=Math.max(J[X-2],0)),e.defined(K)&&(re=te<2?H:W,K[$++]=g.Color.floatToByte(re.red),K[$++]=g.Color.floatToByte(re.green),K[$++]=g.Color.floatToByte(re.blue),K[$++]=g.Color.floatToByte(re.alpha))}}(D=new p.GeometryAttributes).position=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:Y}),D.prevPosition=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:q}),D.nextPosition=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:z}),D.expandAndWidth=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:J}),i.st&&(D.st=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:j})),e.defined(K)&&(D.color=new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:K,normalize:!0}));var ae=c.IndexDatatype.createTypedArray(C,6*A-6),oe=0,ne=0,ie=A-1;for(N=0;N<ie;++N)ae[ne++]=oe,ae[ne++]=oe+2,ae[ne++]=oe+1,ae[ne++]=oe+1,ae[ne++]=oe+2,ae[ne++]=oe+3,oe+=4;return new s.Geometry({attributes:D,indices:ae,primitiveType:s.PrimitiveType.TRIANGLES,boundingSphere:o.BoundingSphere.fromPoints(b),geometryType:s.GeometryType.POLYLINES})}},function(t,r){return e.defined(r)&&(t=b.unpack(t,r)),t._ellipsoid=a.Ellipsoid.clone(t._ellipsoid),b.createGeometry(t)}}));