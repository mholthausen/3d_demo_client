define(["./when-54c2dc71","./Check-6c0211bc","./Math-fc8cecf5","./Cartesian2-bddc1162","./Transforms-6f81ad4c","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./ComponentDatatype-6d99a1ee","./GeometryAttribute-700c1da0","./GeometryAttributes-4fcfcf40","./IndexDatatype-53503fee","./IntersectionTests-7f3bcd5c","./Plane-b6058d9b","./ArcType-dc1c5aee","./EllipsoidRhumbLine-c704bf4c","./EllipsoidGeodesic-30fae80b","./PolylinePipeline-7685bebd","./Color-6328388f"],(function(e,o,t,r,a,l,i,n,s,p,c,d,f,y,u,h,C,T){"use strict";function g(o){var a=(o=e.defaultValue(o,e.defaultValue.EMPTY_OBJECT)).positions,l=o.colors,i=e.defaultValue(o.colorsPerVertex,!1);this._positions=a,this._colors=l,this._colorsPerVertex=i,this._arcType=e.defaultValue(o.arcType,y.ArcType.GEODESIC),this._granularity=e.defaultValue(o.granularity,t.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(o.ellipsoid,r.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry",a=1+a.length*r.Cartesian3.packedLength,a+=e.defined(l)?1+l.length*T.Color.packedLength:1,this.packedLength=a+r.Ellipsoid.packedLength+3}g.pack=function(o,t,a){var l;a=e.defaultValue(a,0);var i=o._positions,n=i.length;for(t[a++]=n,l=0;l<n;++l,a+=r.Cartesian3.packedLength)r.Cartesian3.pack(i[l],t,a);var s=o._colors;for(n=e.defined(s)?s.length:0,t[a++]=n,l=0;l<n;++l,a+=T.Color.packedLength)T.Color.pack(s[l],t,a);return r.Ellipsoid.pack(o._ellipsoid,t,a),a+=r.Ellipsoid.packedLength,t[a++]=o._colorsPerVertex?1:0,t[a++]=o._arcType,t[a]=o._granularity,t},g.unpack=function(o,t,a){t=e.defaultValue(t,0);for(var l=o[t++],i=new Array(l),n=0;n<l;++n,t+=r.Cartesian3.packedLength)i[n]=r.Cartesian3.unpack(o,t);var s=0<(l=o[t++])?new Array(l):void 0;for(n=0;n<l;++n,t+=T.Color.packedLength)s[n]=T.Color.unpack(o,t);var p=r.Ellipsoid.unpack(o,t);t+=r.Ellipsoid.packedLength;var c=1===o[t++],d=o[t++],f=o[t];return e.defined(a)?(a._positions=i,a._colors=s,a._ellipsoid=p,a._colorsPerVertex=c,a._arcType=d,a._granularity=f,a):new g({positions:i,colors:s,ellipsoid:p,colorsPerVertex:c,arcType:d,granularity:f})};var m=new Array(2),b=new Array(2),P={positions:m,height:b,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return g.createGeometry=function(o){var l,i,d,f=o._positions,u=o._colors,h=o._colorsPerVertex,g=o._arcType,_=o._granularity,v=(o=o._ellipsoid,t.CesiumMath.chordLength(_,o.maximumRadius)),B=e.defined(u)&&!h,A=f.length,E=0;if(g===y.ArcType.GEODESIC||g===y.ArcType.RHUMB){var k,G,w=g===y.ArcType.GEODESIC?(k=t.CesiumMath.chordLength(_,o.maximumRadius),G=C.PolylinePipeline.numberOfPoints,C.PolylinePipeline.generateArc):(k=_,G=C.PolylinePipeline.numberOfPointsRhumbLine,C.PolylinePipeline.generateRhumbArc),D=C.PolylinePipeline.extractHeights(f,o),L=P;if(g===y.ArcType.GEODESIC?L.minDistance=v:L.granularity=_,L.ellipsoid=o,B){for(var V=0,x=0;x<A-1;x++)V+=G(f[x],f[x+1],k)+1;l=new Float64Array(3*V),d=new Uint8Array(4*V),L.positions=m,L.height=b;var S=0;for(x=0;x<A-1;++x){m[0]=f[x],m[1]=f[x+1],b[0]=D[x],b[1]=D[x+1];var I=w(L);if(e.defined(u))for(var R=I.length/3,O=u[x],M=0;M<R;++M)d[S++]=T.Color.floatToByte(O.red),d[S++]=T.Color.floatToByte(O.green),d[S++]=T.Color.floatToByte(O.blue),d[S++]=T.Color.floatToByte(O.alpha);l.set(I,E),E+=I.length}}else if(L.positions=f,L.height=D,l=new Float64Array(w(L)),e.defined(u)){for(d=new Uint8Array(l.length/3*4),x=0;x<A-1;++x)E=function(e,o,t,r,a,l,i){var n=C.PolylinePipeline.numberOfPoints(e,o,a),s=t.red,p=t.green,c=t.blue,d=t.alpha,f=r.red;if(e=r.green,o=r.blue,a=r.alpha,T.Color.equals(t,r)){for(b=0;b<n;b++)l[i++]=T.Color.floatToByte(s),l[i++]=T.Color.floatToByte(p),l[i++]=T.Color.floatToByte(c),l[i++]=T.Color.floatToByte(d);return i}for(var y=(f-s)/n,u=(e-p)/n,h=(o-c)/n,g=(a-d)/n,m=i,b=0;b<n;b++)l[m++]=T.Color.floatToByte(s+b*y),l[m++]=T.Color.floatToByte(p+b*u),l[m++]=T.Color.floatToByte(c+b*h),l[m++]=T.Color.floatToByte(d+b*g);return m}(f[x],f[x+1],u[x],u[x+1],v,d,E);var U=u[A-1];d[E++]=T.Color.floatToByte(U.red),d[E++]=T.Color.floatToByte(U.green),d[E++]=T.Color.floatToByte(U.blue),d[E++]=T.Color.floatToByte(U.alpha)}}else{i=B?2*A-2:A,l=new Float64Array(3*i),d=e.defined(u)?new Uint8Array(4*i):void 0;var N=0,F=0;for(x=0;x<A;++x){var H=f[x];if(B&&0<x&&(r.Cartesian3.pack(H,l,N),N+=3,O=u[x-1],d[F++]=T.Color.floatToByte(O.red),d[F++]=T.Color.floatToByte(O.green),d[F++]=T.Color.floatToByte(O.blue),d[F++]=T.Color.floatToByte(O.alpha)),B&&x===A-1)break;r.Cartesian3.pack(H,l,N),N+=3,e.defined(u)&&(O=u[x],d[F++]=T.Color.floatToByte(O.red),d[F++]=T.Color.floatToByte(O.green),d[F++]=T.Color.floatToByte(O.blue),d[F++]=T.Color.floatToByte(O.alpha))}}(o=new p.GeometryAttributes).position=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:l}),e.defined(u)&&(o.color=new s.GeometryAttribute({componentDatatype:n.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:d,normalize:!0})),U=2*((i=l.length/3)-1);var W=c.IndexDatatype.createTypedArray(i,U),Y=0;for(x=0;x<i-1;++x)W[Y++]=x,W[Y++]=x+1;return new s.Geometry({attributes:o,indices:W,primitiveType:s.PrimitiveType.LINES,boundingSphere:a.BoundingSphere.fromPoints(f)})},function(o,t){return e.defined(t)&&(o=g.unpack(o,t)),o._ellipsoid=r.Ellipsoid.clone(o._ellipsoid),g.createGeometry(o)}}));