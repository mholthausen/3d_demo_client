define(["./when-54c2dc71","./Cartesian2-49b1de22","./ArcType-dc1c5aee","./Transforms-e9dbfb40","./Color-91231c89","./ComponentDatatype-6d99a1ee","./Check-6c0211bc","./GeometryAttribute-669569db","./GeometryAttributes-4fcfcf40","./IndexDatatype-46306178","./Math-44e92d6b","./PolylinePipeline-eb80587e","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./EllipsoidGeodesic-a2d57ae0","./EllipsoidRhumbLine-9b557f71","./IntersectionTests-6ead8677","./Plane-8f7e53d1"],(function(e,o,t,r,a,l,i,n,s,p,d,c,y,f,u,h,C,T){"use strict";function g(r){var l=(r=e.defaultValue(r,e.defaultValue.EMPTY_OBJECT)).positions,i=r.colors,n=e.defaultValue(r.colorsPerVertex,!1);this._positions=l,this._colors=i,this._colorsPerVertex=n,this._arcType=e.defaultValue(r.arcType,t.ArcType.GEODESIC),this._granularity=e.defaultValue(r.granularity,d.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=e.defaultValue(r.ellipsoid,o.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry",l=1+l.length*o.Cartesian3.packedLength,l+=e.defined(i)?1+i.length*a.Color.packedLength:1,this.packedLength=l+o.Ellipsoid.packedLength+3}g.pack=function(t,r,l){var i;l=e.defaultValue(l,0);var n=t._positions,s=n.length;for(r[l++]=s,i=0;i<s;++i,l+=o.Cartesian3.packedLength)o.Cartesian3.pack(n[i],r,l);var p=t._colors;for(s=e.defined(p)?p.length:0,r[l++]=s,i=0;i<s;++i,l+=a.Color.packedLength)a.Color.pack(p[i],r,l);return o.Ellipsoid.pack(t._ellipsoid,r,l),l+=o.Ellipsoid.packedLength,r[l++]=t._colorsPerVertex?1:0,r[l++]=t._arcType,r[l]=t._granularity,r},g.unpack=function(t,r,l){r=e.defaultValue(r,0);for(var i=t[r++],n=new Array(i),s=0;s<i;++s,r+=o.Cartesian3.packedLength)n[s]=o.Cartesian3.unpack(t,r);var p=0<(i=t[r++])?new Array(i):void 0;for(s=0;s<i;++s,r+=a.Color.packedLength)p[s]=a.Color.unpack(t,r);var d=o.Ellipsoid.unpack(t,r);r+=o.Ellipsoid.packedLength;var c=1===t[r++],y=t[r++],f=t[r];return e.defined(l)?(l._positions=n,l._colors=p,l._ellipsoid=d,l._colorsPerVertex=c,l._arcType=y,l._granularity=f,l):new g({positions:n,colors:p,ellipsoid:d,colorsPerVertex:c,arcType:y,granularity:f})};var m=new Array(2),b=new Array(2),P={positions:m,height:b,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return g.createGeometry=function(i){var y,f,u,h=i._positions,C=i._colors,T=i._colorsPerVertex,g=i._arcType,_=i._granularity,v=(i=i._ellipsoid,d.CesiumMath.chordLength(_,i.maximumRadius)),B=e.defined(C)&&!T,A=h.length,E=0;if(g===t.ArcType.GEODESIC||g===t.ArcType.RHUMB){var k,G,w=g===t.ArcType.GEODESIC?(k=d.CesiumMath.chordLength(_,i.maximumRadius),G=c.PolylinePipeline.numberOfPoints,c.PolylinePipeline.generateArc):(k=_,G=c.PolylinePipeline.numberOfPointsRhumbLine,c.PolylinePipeline.generateRhumbArc),D=c.PolylinePipeline.extractHeights(h,i),L=P;if(g===t.ArcType.GEODESIC?L.minDistance=v:L.granularity=_,L.ellipsoid=i,B){for(var V=0,x=0;x<A-1;x++)V+=G(h[x],h[x+1],k)+1;y=new Float64Array(3*V),u=new Uint8Array(4*V),L.positions=m,L.height=b;var S=0;for(x=0;x<A-1;++x){m[0]=h[x],m[1]=h[x+1],b[0]=D[x],b[1]=D[x+1];var I=w(L);if(e.defined(C))for(var R=I.length/3,O=C[x],M=0;M<R;++M)u[S++]=a.Color.floatToByte(O.red),u[S++]=a.Color.floatToByte(O.green),u[S++]=a.Color.floatToByte(O.blue),u[S++]=a.Color.floatToByte(O.alpha);y.set(I,E),E+=I.length}}else if(L.positions=h,L.height=D,y=new Float64Array(w(L)),e.defined(C)){for(u=new Uint8Array(y.length/3*4),x=0;x<A-1;++x)E=function(e,o,t,r,l,i,n){var s=c.PolylinePipeline.numberOfPoints(e,o,l),p=t.red,d=t.green,y=t.blue,f=t.alpha,u=r.red;if(e=r.green,o=r.blue,l=r.alpha,a.Color.equals(t,r)){for(b=0;b<s;b++)i[n++]=a.Color.floatToByte(p),i[n++]=a.Color.floatToByte(d),i[n++]=a.Color.floatToByte(y),i[n++]=a.Color.floatToByte(f);return n}for(var h=(u-p)/s,C=(e-d)/s,T=(o-y)/s,g=(l-f)/s,m=n,b=0;b<s;b++)i[m++]=a.Color.floatToByte(p+b*h),i[m++]=a.Color.floatToByte(d+b*C),i[m++]=a.Color.floatToByte(y+b*T),i[m++]=a.Color.floatToByte(f+b*g);return m}(h[x],h[x+1],C[x],C[x+1],v,u,E);var U=C[A-1];u[E++]=a.Color.floatToByte(U.red),u[E++]=a.Color.floatToByte(U.green),u[E++]=a.Color.floatToByte(U.blue),u[E++]=a.Color.floatToByte(U.alpha)}}else{f=B?2*A-2:A,y=new Float64Array(3*f),u=e.defined(C)?new Uint8Array(4*f):void 0;var N=0,F=0;for(x=0;x<A;++x){var H=h[x];if(B&&0<x&&(o.Cartesian3.pack(H,y,N),N+=3,O=C[x-1],u[F++]=a.Color.floatToByte(O.red),u[F++]=a.Color.floatToByte(O.green),u[F++]=a.Color.floatToByte(O.blue),u[F++]=a.Color.floatToByte(O.alpha)),B&&x===A-1)break;o.Cartesian3.pack(H,y,N),N+=3,e.defined(C)&&(O=C[x],u[F++]=a.Color.floatToByte(O.red),u[F++]=a.Color.floatToByte(O.green),u[F++]=a.Color.floatToByte(O.blue),u[F++]=a.Color.floatToByte(O.alpha))}}(i=new s.GeometryAttributes).position=new n.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:y}),e.defined(C)&&(i.color=new n.GeometryAttribute({componentDatatype:l.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:u,normalize:!0})),U=2*((f=y.length/3)-1);var W=p.IndexDatatype.createTypedArray(f,U),Y=0;for(x=0;x<f-1;++x)W[Y++]=x,W[Y++]=x+1;return new n.Geometry({attributes:i,indices:W,primitiveType:n.PrimitiveType.LINES,boundingSphere:r.BoundingSphere.fromPoints(h)})},function(t,r){return(t=e.defined(r)?g.unpack(t,r):t)._ellipsoid=o.Ellipsoid.clone(t._ellipsoid),g.createGeometry(t)}}));